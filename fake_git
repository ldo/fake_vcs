#!/usr/bin/python
#+
# This script adds a commit to a Git repository for a change to a single
# specified file, faking the commit time from the last-modified time of
# the file.
#
# Invoke this script as follows:
#
#     fake_git filename msg
#
# Valid options are:
#
#     --useremail=address
#         The e-mail address to record in the repository commit entries. If
#         omitted, git will take it from your global git configuration.
#     --username=username
#         The username to record in the repository commit entries. If
#         omitted, defaults to the value from your global git configuration, or if
#         not there, that of the USER environment variable.
#
# Created by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import subprocess
import re
import getopt

#+
# Useful stuff
#-

def spawn_out(cmd, env = None, input = None, abort_on_error = True) :
    """executes cmd in a subprocess, returning its output as the
    function result. Signals any execution failure."""
    sys.stderr.write("spawn_out %s {%s}\n" % (repr(cmd), repr(env))) # debug
    if input != None : # debug
        sys.stderr.write(" input = %s\n" % repr(input))
    #end if
    child = subprocess.Popen \
      (
        args = cmd,
        stdin = subprocess.PIPE,
        stdout = subprocess.PIPE,
        shell = True,
        env = env
      )
    (stdout, stderr) = child.communicate(input)
    if abort_on_error and child.returncode != 0 :
        raise RuntimeError("spawn_out: child status %d" % child.returncode)
    #end if
    return stdout
#end spawn_out

def shell_escape(arg) :
    """returns arg suitably escaped for use as a command-line argument
    to the Shell."""
    return \
        re.sub \
          (
            r"[\<\>\"\'\|\&\$\#\;\(\)\[\]\`\~\ \\]",
            lambda Match : "\\" + Match.group(0),
            arg
          )
          # Need to catch anything that might be meaningful to shell
#end shell_escape

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    [
        "useremail=",
        "username=",
    ]
  )
user_email = spawn_out("git config user.email").rstrip("\n")
if user_email == "" :
    user_email = None
#end if
username = spawn_out("git config user.name").rstrip("\n")
if username == "" :
    username = os.environ["USER"]
#end if
for keyword, value in opts :
    if keyword == "--useremail" :
        user_email = value
    elif keyword == "--username" :
        username = value
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError("need exactly two args, being the filename and the commit message")
#end if
pathname, commit_msg = args

repo_dir = os.getcwd()
if not os.path.isdir(repo_dir) :
    raise getopt.GetoptError("\"%s\" is not a directory" % repo_dir)
#end if
git_dir = os.path.join(repo_dir, ".git")
if not os.path.isdir(git_dir) :
    raise getopt.GetoptError("\"%s\" is not a git repository" % repo_dir)
#end if
# os.chdir(repo_dir) # already there
branch = open(os.path.join(git_dir, "HEAD"), "r").readline().strip().split(" ")[1]
prev_head = None
for line in spawn_out("git show-ref --head", abort_on_error = False).split("\n") :
  # might fail for empty repository
    if line != "" :
        id, name = line.split(" ", 1)
        if name == branch :
            prev_head = id
            break
        #end if
    #end if
if prev_head != None :
    prev_head = prev_head.split(" ")[0] # assume this is HEAD commit
#end if
commit_time = str(int(os.stat(pathname).st_mtime))
spawn_out("git add %s" % shell_escape(pathname))
tree = spawn_out("git write-tree").rstrip("\n")
cmd = "git commit-tree %s" % tree
if prev_head != None :
    cmd += " -p %s" % prev_head
#end if
revision_env = \
  {
    "GIT_AUTHOR_NAME" : username,
    "GIT_AUTHOR_DATE" : commit_time,
    "GIT_COMMITTER_NAME" : username,
    "GIT_COMMITTER_DATE" : commit_time,
    "TZ" : "UTC",
      # local timezones should only be relevant in output displays, not in repository
  }
if user_email != None :
    revision_env["GIT_AUTHOR_EMAIL"] = user_email
    revision_env["GIT_COMMITTER_EMAIL"] = user_email
#end if
new_head = spawn_out \
  (
    cmd = cmd,
    env = revision_env,
    input = commit_msg
  ).rstrip("\n")
spawn_out("git reset --soft %s" % new_head)
